//                                      DP TOPICS
/*
    LCS (Longest Common Subsequence) length:
        * we can OPTIMIZE space complexity to O(columns) and have a binary variable for the current row and the previous one.
        * optimized one is better in both time and space.
        * time complexity O(n*m).
*/

//ITERATIVE DP:

int SpaceOptimizedLCS(string &s, string &t, int n, int m) {
    int mem[2][m + 1];
    bool bi;
    for (int i = 0; i <= n; i++) {
        bi = i & 1;
        for (int j = 0; j <= m; j++)
            if (i == 0 || j == 0) mem[bi][j] = 0;
            else if (s[i - 1] == t[j - 1]) mem[bi][j] = 1 + mem[1 - bi][j - 1];
            else mem[bi][j] = max(mem[1 - bi][j], mem[bi][j - 1]);
    }
    return mem[bi][m];
}


// LCS's length with recursive dp with memoization:

int mem[N][N], n, m;        //memset(mem, -1, sizeof mem);
int LCS(string &s, string &t, int i, int j) {
        if (i==n || j==m) return 0;
        if (~mem[i][j]) return mem[i][j];
        if(s[i]==t[j]) return mem[i][j] = 1 + LCS(s,t,i+1, j+1);
        return mem[i][j]=max(LCS(s,t,i,j+1),LCS(s,t,i+1,j));
}

// Printing the LCS itself:

string ans;
void Print(int i, int j){
    if(i==n || j==m) return;
    if(s[i]==t[j]){
        ans+=s[i];
        return Print(i+1, j+1);
    }
    int opt=mem[i][j];
    int op1 = mem[i+1][j];
    int op2 = mem[i][j+1];      //redundant
    if(opt==op1) return Print(i+1, j);
    return Print(i, j+1);
}





// printing indexes for pick and leave problem

ll solve(int i, int curTime){
    if(i==n) return 0;
    if(~mem[i][curTime]) return mem[i][curTime];
    int pick=0, leave;
    leave=solve(i+1, curTime);
    if(curTime+arr[i].time<arr[i].burn)
        pick=solve(i+1, curTime+arr[i].time) + arr[i].val;
    return mem[i][curTime]=max(pick, leave);
}

vector<int>ans;
void print(int i, int curTime) {
    if (i == n) return;
    int opt = solve(i, curTime);
    int pick = solve(i + 1, curTime + arr[i].time);     // redundant
    int leave = solve(i + 1, curTime);
    if (opt == leave) return print(i + 1, curTime);

    ans.push_back(arr[i].idx);
    print(i + 1, curTime + arr[i].time);
}








/*
//  Given grid of positive numbers, Start from (0, 0) and end at (n, m).
    Move only to right and down: find path with sum of numbers is maximum.
                15
                24          // answer is 1 + 5 + 4 = 10

                512
                678
                189         // answer is 5 + 6 + 7 + 8 + 9 = 35
*/

int maxPathGrid(int i, int j){
    if(!valid(i, j, n, m)) return 0;
    if(i==n-1 && j==m-1) return arr[i][j];
    if(~mem[i][j]) return mem[i][j];

    int l = maxPathGrid(i+1, j-1);          // down left
    int c = maxPathGrid(i+1, j);            // down
    int r = maxPathGrid(i+1, j+1);          // down right
    return mem[i][j] = arr[i][j] + max({l, c, r});
}
